{"version":3,"sources":["reportWebVitals.js","RandomQ.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","RandomQ","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","quote","author","componentDidMount","assertThisInitialized","currentComp","fetch","response","json","data","random","Math","floor","setState","text","rnd","min","max","textColor","concat","react_default","a","createElement","id","style","color","className","onClick","href","React","Component","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_RandomQ"],"mappings":"8KAYeA,SAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,iDC4CCY,qBA7CX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAO,CACRC,MAAO,GACPC,OAAQ,IAGZT,EAAKU,kBAAoBV,EAAKU,kBAAkBnB,KAAvBU,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAPXA,mFAWd,IAAIY,EAAcT,KAClBU,MAAM,+BACDvB,KAAK,SAASwB,GACX,OAAOA,EAASC,SAEnBzB,KAAK,SAAS0B,GACX,IAAIC,EAASC,KAAKC,MAAoB,IAAdD,KAAKD,UAC/BL,EAAYQ,SAAS,CACfZ,MAAOQ,EAAKC,GAAQI,KACpBZ,OAAQO,EAAKC,GAAQR,4CAOjC,IAAMa,EAAM,SAACC,EAAKC,GACd,OAAON,KAAKC,MAAMD,KAAKD,UAAYO,EAAMD,EAAM,GAAKA,IAEjDE,EAAS,OAAAC,OAASJ,EAAI,EAAE,KAAf,KAAAI,OAAuBJ,EAAI,GAAG,KAA9B,MAAAI,OAAuCJ,EAAI,EAAE,IAA7C,MAEhB,OACIK,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACJH,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACC,MAAMP,GAAYK,GAAG,QAAjC,IAA0C3B,KAAKI,MAAMC,MAArD,KACAmB,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAACC,MAAMP,GAAYK,GAAG,UAAhC,aAAoD3B,KAAKI,MAAME,QAC/DkB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACfN,EAAAC,EAAAC,cAAA,UAAQC,GAAG,YAAYI,QAAS/B,KAAKO,mBAArC,aACAiB,EAAAC,EAAAC,cAAA,KAAGC,GAAG,cAAcK,KAAK,oCAAzB,IAA6DR,EAAAC,EAAAC,cAAA,UAAQI,UAAU,SAA/E,cAvCMG,IAAMC,YCEfC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHf,EAAAC,EAAAC,cAACF,EAAAC,EAAMe,WAAP,KACEhB,EAAAC,EAAAC,cAACe,EAAD,QAQJ3D","file":"static/js/main.5452ded7.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport React from \"react\";\nimport './ransomQ.css'\n\n\nclass RandomQ extends React.Component{\n    constructor(props){\n        super(props)\n        this.state ={\n            quote: '',\n            author: ''\n        }\n\n        this.componentDidMount = this.componentDidMount.bind(this);\n     };\n    //  fetch data from API and set it to state\n    componentDidMount() {\n        let currentComp = this;\n        fetch(\"https://type.fit/api/quotes\")\n            .then(function(response) {\n                return response.json();\n             })\n            .then(function(data) {\n                let random = Math.floor(Math.random()*500)\n              currentComp.setState({\n                    quote: data[random].text,\n                    author: data[random].author\n                })\n     });\n    }\n    \n     render() {\n        // created a random number for random colors\n        const rnd = (min, max) => {\n            return Math.floor(Math.random() * (max - min + 1) + min);\n          };\n         const textColor =`hsl(${rnd(0,360)},${rnd(10,100)}%,${rnd(0,50)}%)`\n     \n        return(\n            <div id=\"quote-box\">\n                <h1 style={{color:textColor}} id=\"text\">\"{this.state.quote}\"</h1>\n                <p style={{color:textColor}} id=\"author\">- Author: {this.state.author}</p>\n                <div className='btn'>\n                <button id=\"new-quote\" onClick={this.componentDidMount}>New qoute</button>\n                <a id=\"tweet-quote\" href=\"https://twitter.com/intent/tweet\"> <button className=\"btn2\"></button> </a>\n                </div>\n            </div>\n        );\n        }\n}\n\nexport default RandomQ;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport RandomQ from './RandomQ';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <RandomQ />\n  </React.StrictMode>\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}